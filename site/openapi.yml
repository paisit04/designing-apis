openapi: 3.0.3
info:
  title: FarmStall API
  version: v1
  description: |-
    An API for writing reviews about your favourite (or worst) farm stalls.

    ![Picture of produce](https://farmstall.designapis.com/img/produce-banner.jpg)

    ---

    # Auth
    To create **Reviews** without being _anonymous_.
    You need to add a **MyUserToken** to
    the Authorization header.

    To get a **MyUserToken**:
    1. Create a **User** with [POST /users](#Users/post_users)
    1. Get a **MyUserToken** by calling [POST /tokens](#Users/post_tokens) with your **User** credentials.
  
    # Reviews
    Reviews are the heart of this API. <br/>
    Registered **Users** and anonymous users can both
    write reviews based on their experience at farm stalls.

    Each review comes with a rating of between one and five stars inclusive.
    
    - One star being the worst experience
    - Five stars being the best

    ### Example Reviews
    "A wonderful time!" &mdash; Bob McNally
      <br/>
      ![5 stars](https://farmstall.designapis.com/img/rating-5.png)
    "An awful place" &mdash; _Anonymous_
      <br/>
      ![1 star](https://farmstall.designapis.com/img/rating-1.png)
    "A totally average place." &mdash; Jane Fair
      <br/>
      ![3 stars](https://farmstall.designapis.com/img/rating-3.png)

  contact:
    name: Josh Ponelat
    email: jponelat+daso@gmail.com
    url: https://farmstall.designapis.com
  license:
    url: https://www.apache.org/licenses/LICENSE-2.0.html
    name: Apache 2.0
externalDocs:
  url: https://farmstall.designapis.com
  description: Hosted docs
tags:
  - name: Reviews
    description: |
      Reviews of your favourite/worst farm stalls.
  - name: Users
    description: Users and authentication.
servers:
- url: https://farmstall.designapis.com/v1
paths:
  /reviews:
    get:
      tags:
        - Reviews
      description: Get a bunch of reviews.
      parameters:
      - name: MaxRating
        description: Filter the reviews by the maximum rating
        in: query
        schema:
          type: number
      responses:
        200:
          description: A bunch of reviews
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    uuid:
                      type: string
                      pattern: '^[0-9a-fA-F\-]{36}$'
                    message:
                      type: string
                    rating:
                      type: integer
                      minimum: 1
                      maximum: 5
                    userId:
                      type: string
                      pattern: '^[0-9a-fA-F\-]{36}$'
                      nullable: true
    post:
      tags:
        - Reviews
      description: Create a new Review
      security:
        - {}
        - MyUserToken: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                message: A lovely experience
                rating: 4
              properties:
                message:
                  type: string
                  example: An awesome time for the whole family.
                rating:
                  type: integer
                  minimum: 1
                  maximum: 5
                  example: 5
                userId:
                  type:  string
                  pattern: '^[0-9a-fA-F\-]{36}$'
                  nullable: true
      responses:
        '201':
          description: Successfully created a new Review
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: An awesome time for the whole family.
                  rating:
                    type: integer
                    minimum: 1
                    maximum: 5
                    example: 5
                  userId:
                    type: string
                    nullable: true
                    pattern: '[a-zA-Z-.0-9]{36}'
                    example: f7f680a8-d111-421f-b6b3-493ebf905078
                  uuid:
                    type: string
                    pattern: '[a-zA-Z-.0-9]{36}'
                    example: f7f680a8-d111-421f-b6b3-493ebf905078
  /reviews/{reviewId}:
    get:
      tags:
        - Reviews
      description: Get a single review
      parameters:
      - name: reviewId
        in: path
        required: true
        schema:
          type: string
          description: The review's ID
          minLength: 36
          maxLength: 36
          pattern: '[a-zA-Z0-9-]+'
          example: 3b5b1707-b82c-4b1d-9078-157053902525
      responses:
        '200':
          description: A single review
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: An awesome time for the whole family.
                  rating:
                    type: integer
                    minimum: 1
                    maximum: 5
                    example: 5
                  userId:
                    minLength: 36
                    maxLength: 36
                    pattern: '^[a-zA-Z0-9-]+$'
                    nullable: true
                    example: f7f680a8-d111-421f-b6b3-493ebf905078
                  uuid:
                    minLength: 36
                    maxLength: 36
                    pattern: '^[a-zA-Z0-9-]+$'
                    example: f7f680a8-d111-421f-b6b3-493ebf905078
  /users:
    post:
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: The username of the user
                  example: ponelat
                password:
                  type: string
                  format: password
                  description: The password of the user
                fullName:
                  type: string
                  description: The full name of the user
                  example: Josh Ponelat
      responses:
        '201':
          description: Successfully created a new user
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    description: The username of the user
                    example: ponelat
                  fullName:
                    type: string
                    description: The full name of the user
                  uuid:
                    type: string
                    pattern: '[a-zA-Z-.0-9]{36}'
                    example: f7f680a8-d111-421f-b6b3-493ebf905078
  /tokens:
    post:
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: The username of the user
                  example: ponelat
                password:
                  type: string
                  format: password
                  description: The password of the user
      responses:
        '200':
          description: Successfully created a token
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: The token for a given user
components:
  securitySchemes:
    MyUserToken:
      type: apiKey
      in: header
      name: Authorization